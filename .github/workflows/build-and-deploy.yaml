name: Build and Deploy

on:
  workflow_dispatch:
  push:
    branches: [release]

env:
  IMAGE_REPO: ghcr.io/${{ github.repository }}

jobs:
  build-and-deploy:
    environment: prod
    strategy:
      matrix:
        node-version: [14.x]
        platform: [ubuntu-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Set environment
        run: |
          BRANCH=${GITHUB_REF##*/}
          STAGE=$BRANCH
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "STAGE=$STAGE" >> $GITHUB_ENV
          echo "PROJECT=SCCU-frontend-$STAGE" >> $GITHUB_ENV

      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker login using Github Token
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.IMAGE_REPO }}

      - name: Build and push to GitHub Packages
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_REPO }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_REPO }}:buildcache,mode=max
          context: .

      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          envs: GITHUB_TOKEN, GITHUB_REPOSITORY, PROJECT, BRANCH, STAGE
          script: |
            rm -rf $PROJECT
            git clone -b $BRANCH https://.:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY $PROJECT
            cd $PROJECT

            sudo docker pull ${{ env.IMAGE_REPO }}:${{ steps.meta.outputs.version }}
            sudo docker-compose --project-name=$PROJECT -f docker-compose.yaml stop
            sudo docker-compose --project-name=$PROJECT -f docker-compose.yaml up -d
